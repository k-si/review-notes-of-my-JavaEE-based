第二章：网络编程

基础知识：
    网络编程主要是传输数据，例如从网上下载图片，使用微信聊天，注册账号等等，都和网络的数据传输有关。而数据的传输需要知道发起人是谁，
    接收人是谁。在网络中，ip地址指定唯一的位置，有了ip地址就可以锁定一台在网络中的计算机，计算机本身有许多服务程序，一直监听着计算机
    的端口，要想让计算机能够响应网络数据，必须找到合适的端口，计算机的服务程序才会进行服务，获取数据。这就是ip地址和端口。

    电脑分很多种类，厂家不同，硬件也都不一样，操作系统可能也不同，那么这么杂乱的体系怎么能通信呢？他们需要遵守同一套规矩：TCP协议（不止
    这一种），这是一种网络传输协议，规定好了在网络中（或者说在空气中）传输信息的种种细节。这样大家的电脑接受的数据包都是相同格式的，非常
    方便计算机处理。

    TCP是可靠的传输协议，在传输数据前需要建立计算机之间的连接，确认连接成功了再传输信息。与之对立的是UDP传输协议，它是不可靠的，因为它
    不需要事先建立连接，就可以直接发送数据包，但是如果网络出现问题，那么数据就可能传输失败，这种方式一般用于局域网中，因为局域网一般网络
    稳定，这样传输速度很快。

    现在的网络编程使用的类一般都是封装了socket细节的类，使用非常方便。socket是一种虚拟意义上的概念，前面说到，计算机之间连接需要ip、端口号
    ，当他们连接好之后就产生了一条虚拟意义上的纽带，连接着两台计算机，这条纽带就像电缆一样传输数据，而这条纽带就称之为socket。socket在Java
    中是一个类，通过socket类可以获取端口号、输入流输出流等等。

知识点1：URL类的应用
        URL类是封装了socket的类，主要掌握下载文件的方式，和通过URL类获取响应信息。（URL、URLConnection、HttpURLConnection）

知识点2：基于TCP的Socket编程
        client端：
            1、创建Socket连接，参数为ip、端口号
            2、从socket获取输入流输出流，向服务器传输数据。（write要flush）
            3、关闭连接
        server端：
            1、创建ServerSocket，参数为对应端口号
            2、ServerSocket.accept阻塞线程，等待连接
            3、从socket获取输入流输出流传输数据
            4、关闭连接

知识点3：基于UDP的Socket编程
        UD编程步骤较为复杂，UDP中不用客户端、服务器端指代两方，而是用发送方、接收方
        Sender方：
            1、创建发送方：DatagramSocket，没有参数
            2、准备压迫发送的数据
               1、DataOutPutStream dos = new DataOutPutStream(new BufferedOutPutStream(new ByteArrayOutPutStream))
               2、dos.write：写入想传输的数据  byte[] data = bos.toByteArray()：将数据转为二进制
            3、封装数据：DatagramPackage，参数有四个，data数组，data的长度、ip、端口
            4、使用socket发送数据
            4、关闭资源

        Receiver方：
            1、创建接受对象DatagramSocket
            2、准备接受数据的容器，buffer数组存放数据，然后用DatagramPackage封装
            3、socket阻塞式接受
            4、查看数据
                1、2、3...
            5、释放资源